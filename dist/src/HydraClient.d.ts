import AcceptConsentRequest from "./types/AcceptConsentRequest";
import AcceptLoginRequest from "./types/AcceptLoginRequest";
import CompletedRequest from "./types/CompletedRequest";
import ConsentRequest from "./types/ConsentRequest";
import EmptyResponse from "./types/EmptyResponse";
import FlushInactiveOAuth2TokensRequest from "./types/FlushInactiveOAuth2TokensRequest";
import JSONWebKey from "./types/JSONWebKey";
import JSONWebKeySet from "./types/JSONWebKeySet";
import JSONWebKeySetGeneratorRequest from "./types/JSONWebKeySetGeneratorRequest";
import OAuth2Client from "./types/OAuth2Client";
import OAuth2TokenIntrospection from "./types/OAuth2TokenIntrospection";
import PreviousConsentSession from "./types/PreviousConsentSession";
import RejectRequest from "./types/RejectRequest";
export default class HydraClient {
    private uri;
    constructor(uri: string);
    getURI(): string;
    getClients(limit?: number, offset?: number): Promise<OAuth2Client[]>;
    createClient(client: OAuth2Client): Promise<OAuth2Client>;
    getClient(id: string): Promise<OAuth2Client>;
    updateClient(id: string, client: OAuth2Client): Promise<OAuth2Client>;
    deleteClient(id: string): Promise<EmptyResponse>;
    getJSONWebKeySet(set: string): Promise<JSONWebKeySet>;
    updateJSONWebKeySet(set: string, body: JSONWebKeySet): Promise<JSONWebKeySet>;
    generateJSONWebKey(set: string, body: JSONWebKeySetGeneratorRequest): Promise<JSONWebKeySet>;
    deleteJSONWebKeySet(set: string): Promise<EmptyResponse>;
    fetchJSONWebKey(kid: string, set: string): Promise<JSONWebKeySet>;
    updateJSONWebKey(set: string, kid: string, body: JSONWebKey): Promise<JSONWebKey>;
    deleteJSONWebKey(set: string, kid: string): Promise<EmptyResponse>;
    getConsentRequest(challenge: string): Promise<ConsentRequest>;
    acceptConsentRequest(challenge: string, body: AcceptConsentRequest): Promise<CompletedRequest>;
    rejectConsentRequest(challenge: string, body: RejectRequest): Promise<CompletedRequest>;
    getLoginRequest(challenge: string): Promise<ConsentRequest>;
    acceptLoginRequest(challenge: string, body: AcceptLoginRequest): Promise<CompletedRequest>;
    rejectLoginRequest(challenge: string, body: RejectRequest): Promise<CompletedRequest>;
    getConsentSessions(user: string): Promise<PreviousConsentSession[]>;
    revokeConsentSessions(user: string): Promise<EmptyResponse>;
    revokeConsentSession(user: string, client: string): Promise<EmptyResponse>;
    invalidateUserSession(user: string): Promise<EmptyResponse>;
    flushExpiredOAuth2AccessTokens(body?: FlushInactiveOAuth2TokensRequest): Promise<EmptyResponse>;
    introspectOAuth2Token(token: string, scope?: string): Promise<OAuth2TokenIntrospection>;
    checkAliveStatus(): Promise<string>;
    checkReadinessStatus(): Promise<string>;
    getVersion(): Promise<string>;
    private get;
    private post;
    private put;
    private delete;
    private joinPath;
}
//# sourceMappingURL=HydraClient.d.ts.map